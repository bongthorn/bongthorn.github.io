(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{154:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return n})),a.d(t,"metadata",(function(){return o})),a.d(t,"rightToc",(function(){return i})),a.d(t,"default",(function(){return c}));var s=a(2),r=(a(0),a(211));const n={title:"Step24 Firestore Security Rules Testing"},o={unversionedId:"flutter-crud2a/firestore-security-rules-test",id:"flutter-crud2a/firestore-security-rules-test",isDocsHomePage:!1,title:"Step24 Firestore Security Rules Testing",description:"Goal of this step",source:"@site/docs/flutter-crud2a/firestore-security-rules-test.md",permalink:"/docs/flutter-crud2a/firestore-security-rules-test",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/flutter-crud2a/firestore-security-rules-test.md",sidebar:"flutterCrud2a",previous:{title:"Step23 Firestore security rules",permalink:"/docs/flutter-crud2a/firestore-security-rules"}},i=[{value:"Goal of this step",id:"goal-of-this-step",children:[]},{value:"Refs",id:"refs",children:[]},{value:"Setup",id:"setup",children:[{value:"Install java",id:"install-java",children:[]},{value:"Install firebase cli",id:"install-firebase-cli",children:[]},{value:"Make <code>server</code> folder",id:"make-server-folder",children:[]}]},{value:"Imitate Quickstart",id:"imitate-quickstart",children:[{value:"Make <code>package.json</code>",id:"make-packagejson",children:[]},{value:"npm install",id:"npm-install",children:[]},{value:"Make <code>test/test.js</code>",id:"make-testtestjs",children:[]},{value:"Copy quickstart rules.",id:"copy-quickstart-rules",children:[]},{value:"Run Test",id:"run-test",children:[]}]},{value:"Test case for our Flutter app",id:"test-case-for-our-flutter-app",children:[]},{value:"Check test reports",id:"check-test-reports",children:[{value:"Start emulator",id:"start-emulator",children:[]},{value:"Test Coverage",id:"test-coverage",children:[]}]},{value:"Deploy Rules",id:"deploy-rules",children:[]},{value:"Seed data",id:"seed-data",children:[]}],l={rightToc:i};function c({components:e,...t}){return Object(r.b)("wrapper",Object(s.a)({},l,t,{components:e,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"goal-of-this-step"},"Goal of this step"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Learn how to write test for Firestore Security Rules")),Object(r.b)("h2",{id:"refs"},"Refs"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(s.a)({parentName:"li"},{href:"https://firebase.google.com/docs/firestore/security/test-rules-emulator"}),"https://firebase.google.com/docs/firestore/security/test-rules-emulator")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(s.a)({parentName:"li"},{href:"https://medium.com/@adityadroid/60-days-of-flutter-building-a-messenger-day-55-56-deploying-firestore-security-rules-using-d8d78fd1eeea"}),"https://medium.com/@adityadroid/60-days-of-flutter-building-a-messenger-day-55-56-deploying-firestore-security-rules-using-d8d78fd1eeea"))),Object(r.b)("h2",{id:"setup"},"Setup"),Object(r.b)("h3",{id:"install-java"},"Install java"),Object(r.b)("p",null,"If you haven't installed java..."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(s.a)({parentName:"li"},{href:"https://chocolatey.org/packages/openjdk#individual"}),"https://chocolatey.org/packages/openjdk#individual")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(s.a)({parentName:"li"},{href:"https://firebase.google.com/docs/rules/emulator-setup"}),"https://firebase.google.com/docs/rules/emulator-setup"))),Object(r.b)("p",null,"*You may need to restart your pc after install!"),Object(r.b)("h3",{id:"install-firebase-cli"},"Install firebase cli"),Object(r.b)("p",null,Object(r.b)("a",Object(s.a)({parentName:"p"},{href:"https://firebase.google.com/docs/cli/"}),"https://firebase.google.com/docs/cli/")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{className:"language-bash",metastring:'title="terminal"',title:'"terminal"'}),"npm install -g firebase-tools\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{className:"language-bash",metastring:'title="terminal"',title:'"terminal"'}),"firebase login\n")),Object(r.b)("p",null,"Check it works correctly"),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{className:"language-bash",metastring:'title="terminal"',title:'"terminal"'}),"firebase projects:list\n")),Object(r.b)("h3",{id:"make-server-folder"},"Make ",Object(r.b)("inlineCode",{parentName:"h3"},"server")," folder"),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{className:"language-bash",metastring:'title="terminal"',title:'"terminal"'}),"mkdir server\ncd server\nfirebase init\n")),Object(r.b)("h2",{id:"imitate-quickstart"},"Imitate Quickstart"),Object(r.b)("p",null,Object(r.b)("a",Object(s.a)({parentName:"p"},{href:"https://firebase.google.com/docs/firestore/security/test-rules-emulator#quickstart"}),"https://firebase.google.com/docs/firestore/security/test-rules-emulator#quickstart")),Object(r.b)("h3",{id:"make-packagejson"},"Make ",Object(r.b)("inlineCode",{parentName:"h3"},"package.json")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{className:"language-json",metastring:'title="server/package.json"',title:'"server/package.json"'}),'{\n  "name": "cloud-firestore-emulator-javascript-quickstart",\n  "version": "1.0.2",\n  "description": "Cloud Firestore emulator testing",\n  "scripts": {\n    "format": "prettier --write **/*.js",\n    "test": "mocha --timeout=10000"\n  },\n  "devDependencies": {\n    "@firebase/testing": "^0.16.11",\n    "mocha": "5.2.0",\n    "prettier": "1.15.2"\n  }\n}\n')),Object(r.b)("h3",{id:"npm-install"},"npm install"),Object(r.b)("p",null,"run ",Object(r.b)("inlineCode",{parentName:"p"},"npm install")," in sever directory."),Object(r.b)("h3",{id:"make-testtestjs"},"Make ",Object(r.b)("inlineCode",{parentName:"h3"},"test/test.js")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{className:"language-js",metastring:'{10} title="test/test.js"',"{10}":!0,title:'"test/test.js"'}),'const firebase = require("@firebase/testing");\nconst fs = require("fs");\n\n/*\n * ============\n *    Setup\n * ============\n */\nconst projectId = "firestore-emulator-example";\nconst port = 8080;\nconst coverageUrl = `http://localhost:${port}/emulator/v1/projects/${projectId}:ruleCoverage.html`;\n\nconst rules = fs.readFileSync("firestore.rules", "utf8");\n\n/**\n * Creates a new app with authentication data matching the input.\n *\n * @param {object} auth the object to use for authentication (typically {uid: some-uid})\n * @return {object} the app.\n */\nfunction authedApp(auth) {\n  return firebase.initializeTestApp({ projectId, auth }).firestore();\n}\n\n/*\n * ============\n *  Test Cases\n * ============\n */\nbeforeEach(async () => {\n  // Clear the database between tests\n  await firebase.clearFirestoreData({ projectId });\n});\n\nbefore(async () => {\n  await firebase.loadFirestoreRules({ projectId, rules });\n});\n\nafter(async () => {\n  await Promise.all(firebase.apps().map(app => app.delete()));\n  console.log(`View rule coverage information at ${coverageUrl}\\n`);\n});\n\ndescribe("My app", () => {\n  it("require users to log in before creating a profile", async () => {\n    const db = authedApp(null);\n    const profile = db.collection("users").doc("alice");\n    await firebase.assertFails(profile.set({ birthday: "January 1" }));\n  });\n\n  it("should enforce the createdAt date in user profiles", async () => {\n    const db = authedApp({ uid: "alice" });\n    const profile = db.collection("users").doc("alice");\n    await firebase.assertFails(profile.set({ birthday: "January 1" }));\n    await firebase.assertSucceeds(\n      profile.set({\n        birthday: "January 1",\n        createdAt: firebase.firestore.FieldValue.serverTimestamp()\n      })\n    );\n  });\n\n  it("should only let users create their own profile", async () => {\n    const db = authedApp({ uid: "alice" });\n    await firebase.assertSucceeds(\n      db\n        .collection("users")\n        .doc("alice")\n        .set({\n          birthday: "January 1",\n          createdAt: firebase.firestore.FieldValue.serverTimestamp()\n        })\n    );\n    await firebase.assertFails(\n      db\n        .collection("users")\n        .doc("bob")\n        .set({\n          birthday: "January 1",\n          createdAt: firebase.firestore.FieldValue.serverTimestamp()\n        })\n    );\n  });\n\n  it("should let anyone read any profile", async () => {\n    const db = authedApp(null);\n    const profile = db.collection("users").doc("alice");\n    await firebase.assertSucceeds(profile.get());\n  });\n\n  it("should let anyone create a room", async () => {\n    const db = authedApp({ uid: "alice" });\n    const room = db.collection("rooms").doc("firebase");\n    await firebase.assertSucceeds(\n      room.set({\n        owner: "alice",\n        topic: "All Things Firebase"\n      })\n    );\n  });\n\n  it("should force people to name themselves as room owner when creating a room", async () => {\n    const db = authedApp({ uid: "alice" });\n    const room = db.collection("rooms").doc("firebase");\n    await firebase.assertFails(\n      room.set({\n        owner: "scott",\n        topic: "Firebase Rocks!"\n      })\n    );\n  });\n\n  it("should not let one user steal a room from another user", async () => {\n    const alice = authedApp({ uid: "alice" });\n    const bob = authedApp({ uid: "bob" });\n\n    await firebase.assertSucceeds(\n      bob\n        .collection("rooms")\n        .doc("snow")\n        .set({\n          owner: "bob",\n          topic: "All Things Snowboarding"\n        })\n    );\n\n    await firebase.assertFails(\n      alice\n        .collection("rooms")\n        .doc("snow")\n        .set({\n          owner: "alice",\n          topic: "skiing > snowboarding"\n        })\n    );\n  });\n});\n')),Object(r.b)("h3",{id:"copy-quickstart-rules"},"Copy quickstart rules."),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{className:"language-js",metastring:'title="firestore.rules"',title:'"firestore.rules"'}),"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /users/{userId} {\n      allow read;\n      allow create: if request.auth.uid == userId && request.resource.data.createdAt == request.time;\n    }\n    match /rooms/{roomId} {\n      allow read;\n      // If you create a room, you must set yourself as the owner.\n      allow create: if request.resource.data.owner == request.auth.uid;\n      // Only the room owner is allowed to modify it.\n      allow update: if resource.data.owner == request.auth.uid;\n    }\n  }\n}\n")),Object(r.b)("h3",{id:"run-test"},"Run Test"),Object(r.b)("p",null,"Let's run example test."),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{className:"language-bash",metastring:'title="terminal"',title:'"terminal"'}),"firebase emulators:exec --only firestore 'npm test'\n")),Object(r.b)("h2",{id:"test-case-for-our-flutter-app"},"Test case for our Flutter app"),Object(r.b)("p",null,"So, let's write test for out security rules by imitating quickstart example."),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{className:"language-js",metastring:'title="test/test.js"',title:'"test/test.js"'}),'...\ndescribe("My app", () => {\n  it("require users to log in before creating a user", async () => {\n    const db = authedApp(null);\n    const user = db.collection("users").doc("alice");\n    await firebase.assertFails(user.set({ name: "Alice" }));\n  });\n\n  it("should let anyone read any published posts", async () => {  \n    const db = authedApp(null);\n    const queryPublished = db.collectionGroup(\'posts\').where("published", "==", true).get();\n    const queryDrafts = db.collectionGroup(\'posts\').where("published", "==", false).get();\n    await firebase.assertSucceeds(queryPublished);\n    await firebase.assertFails(queryDrafts);\n  });\n\n  it("should only let users to query their own post", async () => {\n    const db = authedApp({ uid: "alice" });\n    await firebase.assertSucceeds(\n      db\n        .collection("users")\n        .doc("alice")\n        .collection("posts")\n        .get()\n    );\n    await firebase.assertFails(\n      db\n        .collection("users")\n        .doc("bob")\n        .collection("posts")\n        .get()\n    );\n  });\n\n  it("should not allow to read other\'s draft post", async () => {\n    const alice = authedApp({ uid: "alice" });\n    const bob = authedApp({ uid: "bob" });\n\n    // Make alice\'s draft post\n    const aliceDraftPost = alice.collection("users").doc("alice").collection("posts").doc("alice-post1");\n    await aliceDraftPost.set({title: "title", published: false});\n\n    // Make alice\'s published post\n    const alicePublicPost = alice.collection("users").doc("alice").collection("posts").doc("alice-post2");\n    await alicePublicPost.set({title: "title", published: true});\n\n    // Bob access alice\'s draft post\n    const bobQuery1 = bob.collection("users").doc("alice").collection("posts").doc("alice-post1").get();\n\n    // Bob access alice\'s published post\n    const bobQuery2 = bob.collection("users").doc("alice").collection("posts").doc("alice-post2").get();\n\n    // Alice access alice\'s draft post\n    const aliceQuery = aliceDraftPost.get();\n\n    await firebase.assertFails(bobQuery1);\n    await firebase.assertSucceeds(bobQuery2);\n    await firebase.assertSucceeds(aliceQuery);\n  });\n\n\n  it("require users to log in before creating a post", async () => {\n    const db = authedApp(null);\n    const query = db.collection("users").doc("alice")\n                    .collection("posts").doc()\n                    .set({\n                      title: "alice",\n                      content: "All Things Firebase"\n                    })\n    await firebase.assertFails(query);\n  });\n\n  it("requires title field to create a post", async () => {\n    const db = authedApp({ uid: "alice" });\n    const postDocRef = db.collection("users").doc("alice").collection("posts").doc()\n                  \n    await firebase.assertFails(postDocRef.set({title: ""}));\n    await firebase.assertSucceeds(postDocRef.set({title: "title 1"}));\n  });\n\n\n  it("should not allow to update other\'s post", async () => {\n    const alice = authedApp({ uid: "alice" });\n    const bob = authedApp({ uid: "bob" });\n\n    // Make bob\'s post\n    await bob.collection("users").doc("bob")\n      .collection("posts").doc("bobPost1")\n      .set({title: "hogehoge"});\n\n    // alice query to update bob\'s post\n    aliceQuery = alice.collection("users").doc("bob")\n                  .collection("posts").doc("bobPost1")\n                  .update({title: "hoge"});\n                  \n    await firebase.assertFails(aliceQuery);\n  });\n\n  it("requires title field to update a post", async () => {\n    const db = authedApp({ uid: "alice" });\n    const postDocRef = db.collection("users").doc("alice").collection("posts").doc("post1");\n    await postDocRef.set({title: "hogehgoe"});\n                  \n    await firebase.assertFails(postDocRef.update({title: ""}));\n    await firebase.assertSucceeds(postDocRef.update({title: "title 1"}));\n  });\n\n  it("should not allow to delete other\'s post", async () => {\n    const alice = authedApp({ uid: "alice" });\n\n    // alice query to update bob\'s post\n    aliceQuery = alice.collection("users").doc("bob")\n                  .collection("posts").doc("bobPost1")\n                  .delete();\n                  \n    await firebase.assertFails(aliceQuery);\n  });\n});\n')),Object(r.b)("h2",{id:"check-test-reports"},"Check test reports"),Object(r.b)("p",null,Object(r.b)("a",Object(s.a)({parentName:"p"},{href:"https://firebase.google.com/docs/rules/emulator-reports"}),"https://firebase.google.com/docs/rules/emulator-reports")),Object(r.b)("h3",{id:"start-emulator"},"Start emulator"),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{className:"language-bash",metastring:'title="terminal"',title:'"terminal"'}),"firebase emulators:start --only firestore\n")),Object(r.b)("p",null,"Then, in another terminal tab"),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{className:"language-bash",metastring:'title="terminal"',title:'"terminal"'}),"npm run test\n")),Object(r.b)("p",null,"And visit generated url"),Object(r.b)("h3",{id:"test-coverage"},"Test Coverage"),Object(r.b)("p",null,Object(r.b)("a",Object(s.a)({parentName:"p"},{href:"https://firebase.google.com/docs/rules/emulator-reports"}),"https://firebase.google.com/docs/rules/emulator-reports")),Object(r.b)("p",null,"If test is not applied to the rules, it shows message like this.\n",Object(r.b)("img",Object(s.a)({parentName:"p"},{src:"https://storage.googleapis.com/coderhackers-assets/flutter_firebase_firestore_crud2a/Screen%20Shot%202020-02-27%20at%205.31.13.png",alt:"ss-of-coverage"}))),Object(r.b)("h2",{id:"deploy-rules"},"Deploy Rules"),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{className:"language-bash",metastring:'title="terminal"',title:'"terminal"'}),"# inside server dir\nfirebase deploy --only firestore:rules\n")),Object(r.b)("h2",{id:"seed-data"},"Seed data"),Object(r.b)("p",null,"This is just a memo links."),Object(r.b)("p",null,Object(r.b)("a",Object(s.a)({parentName:"p"},{href:"https://github.com/firebase/firebase-tools/issues/1167#issuecomment-545641337"}),"https://github.com/firebase/firebase-tools/issues/1167#issuecomment-545641337"),"\n",Object(r.b)("a",Object(s.a)({parentName:"p"},{href:"https://stackoverflow.com/questions/56268092/how-to-setup-test-data-when-testing-firestore-rules-with-emulator"}),"https://stackoverflow.com/questions/56268092/how-to-setup-test-data-when-testing-firestore-rules-with-emulator"),"\n",Object(r.b)("a",Object(s.a)({parentName:"p"},{href:"https://github.com/sgr-ksmt/firestore-emulator-rules-test/blob/master/test/test.ts"}),"https://github.com/sgr-ksmt/firestore-emulator-rules-test/blob/master/test/test.ts"),"\n",Object(r.b)("a",Object(s.a)({parentName:"p"},{href:"https://techlife.cookpad.com/entry/2018/11/05/143000"}),"https://techlife.cookpad.com/entry/2018/11/05/143000")))}c.isMDXComponent=!0},211:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return f}));var s=a(0),r=a.n(s);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,s)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,s,r=function(e,t){if(null==e)return{};var a,s,r={},n=Object.keys(e);for(s=0;s<n.length;s++)a=n[s],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(s=0;s<n.length;s++)a=n[s],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=r.a.createContext({}),u=function(e){var t=r.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},b=function(e){var t=u(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var a=e.components,s=e.mdxType,n=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),b=u(a),d=s,f=b["".concat(o,".").concat(d)]||b[d]||p[d]||n;return a?r.a.createElement(f,i(i({ref:t},c),{},{components:a})):r.a.createElement(f,i({ref:t},c))}));function f(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var n=a.length,o=new Array(n);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var c=2;c<n;c++)o[c]=a[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);