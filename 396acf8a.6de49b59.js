(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{211:function(t,e,n){"use strict";n.d(e,"a",(function(){return f}));var r=n(0),a=n.n(r);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var c=a.a.createContext({}),d=function(t){var e=a.a.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},p={inlineCode:"code",wrapper:function(t){var e=t.children;return a.a.createElement(a.a.Fragment,{},e)}},u=a.a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,i=t.parentName,c=s(t,["components","mdxType","originalType","parentName"]),u=d(n),f=r,g=u["".concat(i,".").concat(f)]||u[f]||p[f]||o;return n?a.a.createElement(g,l(l({ref:e},c),{},{components:n})):a.a.createElement(g,l({ref:e},c))}));function f(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l.mdxType="string"==typeof t?t:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},92:function(t,e,n){"use strict";n.r(e),n.d(e,"frontMatter",(function(){return o})),n.d(e,"metadata",(function(){return i})),n.d(e,"rightToc",(function(){return l})),n.d(e,"default",(function(){return c}));var r=n(2),a=(n(0),n(211));const o={title:"Step22 Edit Post Page"},i={unversionedId:"flutter-crud2a/edit-post-page",id:"flutter-crud2a/edit-post-page",isDocsHomePage:!1,title:"Step22 Edit Post Page",description:"Goal of this chapter",source:"@site/docs/flutter-crud2a/edit-post-page.md",permalink:"/docs/flutter-crud2a/edit-post-page",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/flutter-crud2a/edit-post-page.md",sidebar:"flutterCrud2a",previous:{title:"Step21 Delete Post",permalink:"/docs/flutter-crud2a/delete-post"},next:{title:"Step23 Firestore security rules",permalink:"/docs/flutter-crud2a/firestore-security-rules"}},l=[{value:"Goal of this chapter",id:"goal-of-this-chapter",children:[]},{value:"Add Navigation to PostsEditPage",id:"add-navigation-to-postseditpage",children:[]},{value:"Edit PostsEditPage",id:"edit-postseditpage",children:[]},{value:"Important part of this code",id:"important-part-of-this-code",children:[]}],s={rightToc:l};function c({components:t,...e}){return Object(a.a)("wrapper",Object(r.a)({},s,e,{components:t,mdxType:"MDXLayout"}),Object(a.a)("h2",{id:"goal-of-this-chapter"},"Goal of this chapter"),Object(a.a)("ul",null,Object(a.a)("li",{parentName:"ul"},"Edit Post Edit Page")),Object(a.a)("h2",{id:"add-navigation-to-postseditpage"},"Add Navigation to PostsEditPage"),Object(a.a)("pre",null,Object(a.a)("code",Object(r.a)({parentName:"pre"},{className:"language-dart",metastring:'title="lib/pages/my_posts_page.dart"',title:'"lib/pages/my_posts_page.dart"'}),"case 'edit':\n    Navigator.push(\n        context,\n        MaterialPageRoute(\n            builder: (context) => PostsEditPage(post: post),\n        ),\n    );\n    break;\n")),Object(a.a)("h2",{id:"edit-postseditpage"},"Edit PostsEditPage"),Object(a.a)("p",null,"This code is almost same with Post New Page. I will explain the difference later."),Object(a.a)("pre",null,Object(a.a)("code",Object(r.a)({parentName:"pre"},{className:"language-dart",metastring:'title="lib/pages/posts_edit_page.dart"',title:'"lib/pages/posts_edit_page.dart"'}),"import 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:flutter/material.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter_firebase_firestore_crud2a/models/post.dart';\nimport 'package:provider/provider.dart';\n\nclass PostsEditPage extends StatefulWidget {\n  PostsEditPage({Key key, @required this.post}) : super(key: key);\n  final Post post;\n\n  @override\n  _PostsEditPageState createState() => _PostsEditPageState();\n}\n\nclass _PostsEditPageState extends State<PostsEditPage> {\n  final GlobalKey<FormState> _editPostFormKey_ = GlobalKey<FormState>();\n  final titleInputController = TextEditingController();\n  final contentInputController = TextEditingController();\n\n  // https://flutter.dev/docs/development/ui/interactive\n  bool _isSubmitting = false;\n\n  @override\n  initState() {\n    // https://github.com/flutter/flutter/issues/9969\n    titleInputController.text = widget.post.title;\n    contentInputController.text = widget.post.content;\n    super.initState();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n        appBar: AppBar(\n          title: Text(\"Edit Post\"),\n        ),\n        body: Container(\n          padding: const EdgeInsets.all(20.0),\n          child: SingleChildScrollView(\n            child: Form(\n            key: _editPostFormKey_,\n            child: Column(\n              children: <Widget>[\n                TextFormField(\n                  decoration: InputDecoration(\n                      labelText: 'Title*', hintText: \"Title\"),\n                  controller: titleInputController,\n                  validator: (value) {\n                    if (value.isEmpty) {\n                      return \"Please enter a title.\";\n                    }\n                    return null;\n                  },\n                ),\n                TextFormField(\n                  decoration: InputDecoration(\n                      labelText: 'Content', hintText: \"Post content here...\"),\n                  controller: contentInputController,\n                ),\n                SizedBox(height: 20),\n                _isSubmitting ? // https://stackoverflow.com/questions/47065098/how-to-work-with-progress-indicator-in-flutter\n                Center(child: CircularProgressIndicator())\n                :\n                RaisedButton(\n                  child: Text(\"Update Post\"),\n                  color: Theme.of(context).primaryColor,\n                  textColor: Colors.white,\n                  onPressed: () async {\n                    if (_editPostFormKey_.currentState.validate()) {\n                      try {\n                        setState(() {\n                          _isSubmitting = true;\n                        });\n                        \n                        final user = Provider.of<FirebaseUser>(context, listen: false);\n                      \n                        await Firestore.instance\n                          .collection('users')\n                          .document(user.uid)\n                          .collection(\"posts\")\n                          .document(widget.post.id)\n                          .updateData({\n                            \"title\": titleInputController.text,\n                            \"content\": contentInputController.text,\n                                                        \"updatedAt\": FieldValue.serverTimestamp()\n                          });\n                        \n                        Navigator.pop(context);\n                      } catch (e) {\n                        print('Error Happened!!!: $e');\n                        setState(() {\n                          _isSubmitting = false;\n                        });\n                      }  \n                    }\n                  },\n                ),\n              ],\n            ),\n          )\n        )\n      )\n    );\n  }\n}\n")),Object(a.a)("h2",{id:"important-part-of-this-code"},"Important part of this code"),Object(a.a)("ul",null,Object(a.a)("li",{parentName:"ul"},"Set initial form value by using passed props.")),Object(a.a)("pre",null,Object(a.a)("code",Object(r.a)({parentName:"pre"},{className:"language-dart"}),"initState() {\n    // https://github.com/flutter/flutter/issues/9969\n    titleInputController.text = widget.post.title;\n    contentInputController.text = widget.post.content;\n    super.initState();\n}\n")),Object(a.a)("ul",null,Object(a.a)("li",{parentName:"ul"},"Update firestore request.\n",Object(a.a)("a",Object(r.a)({parentName:"li"},{href:"https://pub.dev/documentation/cloud_firestore/latest/cloud_firestore/DocumentReference-class.html"}),"https://pub.dev/documentation/cloud_firestore/latest/cloud_firestore/DocumentReference-class.html"))),Object(a.a)("pre",null,Object(a.a)("code",Object(r.a)({parentName:"pre"},{className:"language-dart"}),'await Firestore.instance\n    .collection(\'users\')\n    .document(user.uid)\n    .collection("posts")\n    .document(widget.post.id)\n    .updateData({\n        "title": titleInputController.text,\n        "content": contentInputController.text,\n        "updatedAt": FieldValue.serverTimestamp()\n    });\n')))}c.isMDXComponent=!0}}]);